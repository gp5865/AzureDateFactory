{
	"name": "AggregateDataFlow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_empdataDataset_Updated",
						"type": "DatasetReference"
					},
					"name": "Employees"
				},
				{
					"dataset": {
						"referenceName": "ds_depdataDataset",
						"type": "DatasetReference"
					},
					"name": "Departments"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_dataflowoutputDataset",
						"type": "DatasetReference"
					},
					"name": "TotalEmployeesByDep"
				}
			],
			"transformations": [
				{
					"name": "AggregateByDepartment"
				},
				{
					"name": "JoinAEmpandDep"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empid as short,",
				"          name as string,",
				"          country as string,",
				"          department as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Employees",
				"source(output(",
				"          depid as short,",
				"          depname as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Departments",
				"Employees aggregate(groupBy(department),",
				"     TotalEmployees = count(empid)) ~> AggregateByDepartment",
				"AggregateByDepartment, Departments join(department == depid,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinAEmpandDep",
				"JoinAEmpandDep sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['TotalEmployeesByDepUpdated.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          Depname = depname,",
				"          TotalEmployees",
				"     ),",
				"     partitionBy('hash', 1)) ~> TotalEmployeesByDep"
			]
		}
	}
}